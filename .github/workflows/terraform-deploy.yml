name: Deploy Terraform Infrastructure

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'IaC/terraform-deployment/**'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'IaC/terraform-deployment/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
          - refresh

env:
  TF_VERSION: '1.9.8'
  WORKING_DIR: './IaC/terraform-deployment'

jobs:
  terraform-check:
    name: 'Terraform Check'
    runs-on: ubuntu-latest
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout      
    outputs:
      environment: ${{ steps.determine-env.outputs.environment }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Determine Environment
      id: determine-env
      run: |
        # Debug information
        echo "Event name: ${{ github.event_name }}"
        echo "GitHub ref: ${{ github.ref }}"
        echo "Selected environment: ${{ github.event.inputs.environment }}"
        
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "Setting environment to: ${{ github.event.inputs.environment }}"
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "Setting environment to: prod (main branch)"
          echo "environment=prod" >> $GITHUB_OUTPUT
        else
          echo "Setting environment to: dev (default)"
          echo "environment=dev" >> $GITHUB_OUTPUT
        fi
        
        # Verify what was set
        echo "Final environment value: $(cat $GITHUB_OUTPUT | grep environment | cut -d'=' -f2)"

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format
      working-directory: ${{ env.WORKING_DIR }}
      run: terraform fmt -check -recursive

    - name: Terraform Init
      working-directory: ${{ env.WORKING_DIR }}
      run: terraform init -backend=false

    - name: Terraform Validate
      working-directory: ${{ env.WORKING_DIR }}
      run: terraform validate

  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: terraform-check
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout
    if: github.event_name == 'pull_request' || 
        (github.event_name == 'workflow_dispatch' && (github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply')) || 
        (github.ref == 'refs/heads/main' && github.event_name == 'push')
    environment: ${{ needs.terraform-check.outputs.environment }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
      
    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_MSI_CLIENTID }}
        tenant-id: ${{ secrets.AZURE_MSI_TENANTID }}
        subscription-id: ${{ secrets.AZURE_MSI_SUBSCRIPTIONID }}

    - name: Terraform Init
      working-directory: ${{ env.WORKING_DIR }}
      timeout-minutes: 5
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_MSI_CLIENTID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_MSI_SUBSCRIPTIONID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_MSI_TENANTID }}
      run: |
        # Set debug logging for troubleshooting
        export TF_LOG=DEBUG
        
        terraform init -input=false \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
          -backend-config="key=${{ needs.terraform-check.outputs.environment }}.terraform.tfstate" \
          -backend-config="use_oidc=true" \
          -backend-config="use_azuread_auth=true"

    - name: Terraform Plan
      working-directory: ${{ env.WORKING_DIR }}
      env:
        ARM_USE_OIDC: true
        ARM_CLIENT_ID: ${{ secrets.AZURE_MSI_CLIENTID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_MSI_SUBSCRIPTIONID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_MSI_TENANTID }}
      run: |
        terraform plan -input=false \
          -var-file="environments/${{ needs.terraform-check.outputs.environment }}.tfvars" \
          -out="${{ needs.terraform-check.outputs.environment }}.tfplan"

    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ needs.terraform-check.outputs.environment }}
        path: ${{ env.WORKING_DIR }}/${{ needs.terraform-check.outputs.environment }}.tfplan
        retention-days: 5
        if-no-files-found: error # Ensures the job fails if plan wasn't created

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout    
    needs: [terraform-check, terraform-plan]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment: ${{ needs.terraform-check.outputs.environment }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_MSI_CLIENTID }}
        tenant-id: ${{ secrets.AZURE_MSI_TENANTID }}
        subscription-id: ${{ secrets.AZURE_MSI_SUBSCRIPTIONID }}

    - name: Download Plan Artifact
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-${{ needs.terraform-check.outputs.environment }}
        path: ${{ env.WORKING_DIR }}

    - name: Verify Plan File Exists
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        if [ ! -f "${{ needs.terraform-check.outputs.environment }}.tfplan" ]; then
          echo "Error: Plan file not found at ${{ env.WORKING_DIR }}/${{ needs.terraform-check.outputs.environment }}.tfplan"
          ls -la
          exit 1
        fi
        echo "Plan file found at ${{ env.WORKING_DIR }}/${{ needs.terraform-check.outputs.environment }}.tfplan"

    - name: Terraform Init
      working-directory: ${{ env.WORKING_DIR }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_MSI_CLIENTID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_MSI_SUBSCRIPTIONID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_MSI_TENANTID }}
      run: |
        # Set debug logging for troubleshooting
        export TF_LOG=DEBUG
        
        terraform init -input=false \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
          -backend-config="key=${{ needs.terraform-check.outputs.environment }}.terraform.tfstate" \
          -backend-config="use_oidc=true" \
          -backend-config="use_azuread_auth=true"

    - name: Terraform Apply
      working-directory: ${{ env.WORKING_DIR }}
      env:
        ARM_USE_OIDC: true
        ARM_USE_AZUREAD: true
        ARM_CLIENT_ID: ${{ secrets.AZURE_MSI_CLIENTID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_MSI_SUBSCRIPTIONID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_MSI_TENANTID }}
      run: terraform apply -input=false -auto-approve "${{ needs.terraform-check.outputs.environment }}.tfplan"

  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    needs: terraform-check
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout    
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: ${{ needs.terraform-check.outputs.environment }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_MSI_CLIENTID }}
        tenant-id: ${{ secrets.AZURE_MSI_TENANTID }}
        subscription-id: ${{ secrets.AZURE_MSI_SUBSCRIPTIONID }}

    - name: Terraform Init
      working-directory: ${{ env.WORKING_DIR }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_MSI_CLIENTID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_MSI_SUBSCRIPTIONID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_MSI_TENANTID }}
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
          -backend-config="key=${{ needs.terraform-check.outputs.environment }}.terraform.tfstate" \
          -backend-config="use_oidc=true" \
          -backend-config="use_azuread_auth=true"

    - name: Terraform Destroy
      working-directory: ${{ env.WORKING_DIR }}
      env:
        ARM_USE_OIDC: true
        ARM_USE_AZUREAD: true
        ARM_CLIENT_ID: ${{ secrets.AZURE_MSI_CLIENTID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_MSI_SUBSCRIPTIONID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_MSI_TENANTID }}
      run: |
        terraform destroy -auto-approve -input=false \
          -var-file="environments/${{ needs.terraform-check.outputs.environment }}.tfvars"

  terraform-refresh:
    name: 'Terraform State Refresh'
    runs-on: ubuntu-latest
    needs: terraform-check
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout    
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'refresh'
    environment: ${{ needs.terraform-check.outputs.environment }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_MSI_CLIENTID }}
        tenant-id: ${{ secrets.AZURE_MSI_TENANTID }}
        subscription-id: ${{ secrets.AZURE_MSI_SUBSCRIPTIONID }}

    - name: Terraform Init
      working-directory: ${{ env.WORKING_DIR }}
      timeout-minutes: 5
      env:
        ARM_USE_OIDC: true
        ARM_USE_AZUREAD: true
        ARM_CLIENT_ID: ${{ secrets.AZURE_MSI_CLIENTID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_MSI_SUBSCRIPTIONID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_MSI_TENANTID }}
      run: |
        # Set debug logging for troubleshooting
        export TF_LOG=DEBUG
        
        terraform init -input=false \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
          -backend-config="key=${{ needs.terraform-check.outputs.environment }}.terraform.tfstate" \
          -backend-config="use_oidc=true" \
          -backend-config="use_azuread_auth=true"

    - name: Terraform Refresh State
      working-directory: ${{ env.WORKING_DIR }}
      timeout-minutes: 30
      env:
        ARM_USE_OIDC: true
        ARM_USE_AZUREAD: true
        TF_LOG: INFO
        ARM_CLIENT_ID: ${{ secrets.AZURE_MSI_CLIENTID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_MSI_SUBSCRIPTIONID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_MSI_TENANTID }}
      run: |
        echo "Starting state refresh for environment: ${{ needs.terraform-check.outputs.environment }}"
        terraform apply -refresh-only -auto-approve -input=false \
          -var-file="environments/${{ needs.terraform-check.outputs.environment }}.tfvars" | tee terraform_refresh.log
        
        # Check for potential issues in the log
        if grep -q "Error:" terraform_refresh.log; then
          echo "Warning: Errors detected during refresh. Review the logs carefully."
        fi

    - name: Backup Terraform State
      if: success()
      working-directory: ${{ env.WORKING_DIR }}
      env:
        ARM_USE_OIDC: true
        ARM_USE_AZUREAD: true
        ARM_CLIENT_ID: ${{ secrets.AZURE_MSI_CLIENTID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_MSI_SUBSCRIPTIONID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_MSI_TENANTID }}
      run: |
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        terraform state pull > "terraform-state-${{ needs.terraform-check.outputs.environment }}-${TIMESTAMP}.backup"
        
        # Create directory for state backups
        mkdir -p ./state-backups
        cp "terraform-state-${{ needs.terraform-check.outputs.environment }}-${TIMESTAMP}.backup" ./state-backups/

    - name: Upload State Backup
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: terraform-state-backup-${{ needs.terraform-check.outputs.environment }}
        path: ${{ env.WORKING_DIR }}/state-backups/
        retention-days: 30
